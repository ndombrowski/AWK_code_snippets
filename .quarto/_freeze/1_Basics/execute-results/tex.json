{
  "hash": "48a392c1531881c9697dc3d56a048af9",
  "result": {
    "markdown": "# AWK basics\n\n## Formating tables\n\n### Replacing empty space with symbols\n\nIn a tab delimited file, replace any empty field with a `-`\n\n::: {.cell execution_count=1}\n``` {.bash .cell-code}\nawk 'BEGIN {FS = OFS = \"\\t\"} {for(i=1; i<=NF; i++) if($i ~ /^ *$/) $i = \"-\" }; 1' input > input_new\n```\n:::\n\n\n### Add new columns based on conditions\n\nExample usage:\nIf a value in column 4 is larger than the value in column 5 give it a notification, otherwise use a -.\n\n::: {.cell execution_count=2}\n``` {.bash .cell-code}\nwk  -v OFS='\\t' '{if ($4 > $5){ $7=\"high_score\" }else{ $7=\"-\"} print }' input > input_new\n```\n:::\n\n\n### Replacing column names\n\nExample: replace the first column name to accession\n\n::: {.cell execution_count=3}\n``` {.bash .cell-code}\nawk 'BEGIN{FS=\"\\t\";FS=\"\\t\"; OFS=\"\\t\"}{if(NR==1) $1=\"accession\"} {print $0 }' input > input_new\n```\n:::\n\n\n## Subsetting tables\n\n### Print lines that have specific pattern.\n\n::: {.cell execution_count=4}\n``` {.bash .cell-code}\n#just print rows if they contain the word hello in the 5th column\nawk  '$5 == \"hello\"' Input\n\n#look for a pattern and define what we want to print\nawk '/hello/ {print $1}' Input\nawk '$5 == \"hello\" {print $1}' Input\n\n#we can also search for more than one pattern\nawk '$1 ~ /John|Eric/ {print $0}' Input\n\n#print everything, except rows with John and Eric\nawk '!/John|Eric/ {print $1,$3}' Input\nawk '$1 !~ /John|Eric/ {print $1,$3}' Input\n```\n:::\n\n\n### Split tables by categories\n\nImagine we have a table listing people from different states, the states are listed in column 3. With awk we can easily split this one table, into multiple tables, one each per state\n\n::: {.cell execution_count=5}\n``` {.bash .cell-code}\n#print all columns, one table/state\nawk '{print > $3\".txt\"}'  Input\n\n#print only the first column, one table/state\nawk '{print $1 > $3\".txt\"}'  Input\n```\n:::\n\n\nThis command will generate several new text files in our working directory.\n\n## Splitting columns\n\nWe can also split columns. \nFor example, we could have something like this in the first column: BinID-accession.\nNow we want to split this in two columns, one for the binID , the second should contain the accession.\n\nSome new syntax for AWK:\n\n- **split()** =  the function 'split' divides a string into pieces\n- **$1** =  The column we want to split\n- **\"x\"** =  The pattern we want to use for splitting\n- **a** =  We name the ARRAY we generate 'a'. An ARRAY is similar to a variable you just can store more information in the array we store the different pieces that were split\n- **a[1]** =  retrieve the first part of the split array =E\n- **a[2]** =  retrieve the second part of the split array =1\n\n::: {.cell execution_count=6}\n``` {.bash .cell-code}\nawk 'BEGIN{FS=OFS=\"\\t\"}{split($1,a,\"-\")} {print $1,a[1],a[2]}' Input\n```\n:::\n\n\n## print the header of a table\n\n::: {.cell execution_count=7}\n``` {.bash .cell-code}\nawk -F'\\t' '{for (i = 1; i <= NF; ++i) print i, $i; exit }' temp1\n```\n:::\n\n\n",
    "supporting": [
      "1_Basics_files"
    ],
    "filters": []
  }
}