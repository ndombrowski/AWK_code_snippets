[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AWK cookbook",
    "section": "",
    "text": "This is a cook book for key AWK commands."
  },
  {
    "objectID": "code/1_Basics.html",
    "href": "code/1_Basics.html",
    "title": "1  AWK basics",
    "section": "",
    "text": "In a tab delimited file, replace any empty field with a -\n\nawk 'BEGIN {FS = OFS = \"\\t\"} {for(i=1; i<=NF; i++) if($i ~ /^ *$/) $i = \"-\" }; 1' input > input_new\n\n\n\n\nExample usage: If a value in column 4 is larger than the value in column 5 give it a notification, otherwise use a -.\n\nwk  -v OFS='\\t' '{if ($4 > $5){ $7=\"high_score\" }else{ $7=\"-\"} print }' input > input_new\n\n\n\n\nExample: replace the first column name to accession\n\nawk 'BEGIN{FS=\"\\t\";FS=\"\\t\"; OFS=\"\\t\"}{if(NR==1) $1=\"accession\"} {print $0 }' input > input_new"
  },
  {
    "objectID": "code/1_Basics.html#subsetting-tables",
    "href": "code/1_Basics.html#subsetting-tables",
    "title": "1  AWK basics",
    "section": "1.2 Subsetting tables",
    "text": "1.2 Subsetting tables\n\n1.2.1 Print lines that have specific pattern.\n\n#just print rows if they contain the word hello in the 5th column\nawk  '$5 == \"hello\"' Input\n\n#look for a pattern and define what we want to print\nawk '/hello/ {print $1}' Input\nawk '$5 == \"hello\" {print $1}' Input\n\n#we can also search for more than one pattern\nawk '$1 ~ /John|Eric/ {print $0}' Input\n\n#print everything, except rows with John and Eric\nawk '!/John|Eric/ {print $1,$3}' Input\nawk '$1 !~ /John|Eric/ {print $1,$3}' Input\n\n\n\n1.2.2 Split tables by categories\nImagine we have a table listing people from different states, the states are listed in column 3. With awk we can easily split this one table, into multiple tables, one each per state\n\n#print all columns, one table/state\nawk '{print > $3\".txt\"}'  Input\n\n#print only the first column, one table/state\nawk '{print $1 > $3\".txt\"}'  Input\n\nThis command will generate several new text files in our working directory."
  },
  {
    "objectID": "code/1_Basics.html#splitting-columns",
    "href": "code/1_Basics.html#splitting-columns",
    "title": "1  AWK basics",
    "section": "1.3 Splitting columns",
    "text": "1.3 Splitting columns\nWe can also split columns. For example, we could have something like this in the first column: BinID-accession. Now we want to split this in two columns, one for the binID , the second should contain the accession.\nSome new syntax for AWK:\n\nsplit() = the function ‘split’ divides a string into pieces\n$1 = The column we want to split\n“x” = The pattern we want to use for splitting\na = We name the ARRAY we generate ‘a’. An ARRAY is similar to a variable you just can store more information in the array we store the different pieces that were split\na[1] = retrieve the first part of the split array =E\na[2] = retrieve the second part of the split array =1\n\n\nawk 'BEGIN{FS=OFS=\"\\t\"}{split($1,a,\"-\")} {print $1,a[1],a[2]}' Input"
  },
  {
    "objectID": "code/1_Basics.html#print-the-header-of-a-table",
    "href": "code/1_Basics.html#print-the-header-of-a-table",
    "title": "1  AWK basics",
    "section": "1.4 print the header of a table",
    "text": "1.4 print the header of a table\n\nawk -F'\\t' '{for (i = 1; i <= NF; ++i) print i, $i; exit }' temp1"
  },
  {
    "objectID": "code/Math.html",
    "href": "code/Math.html",
    "title": "2  Math with AWK",
    "section": "",
    "text": "awk -F'\\t' -v OFS='\\t' '{sum+=$2} END {print sum}'  File.txt"
  },
  {
    "objectID": "code/Dealing_with_seqs.html",
    "href": "code/Dealing_with_seqs.html",
    "title": "3  Dealing with Sequence Data",
    "section": "",
    "text": "awk -v OFS='\\t' '/>/ {count++} END{print FILENAME, count}' Input.faa\n\n\n\n\nfor i in *fna; do awk '/>/{sub(\">\",\"&\"FILENAME\"-\");sub(/\\.fna/,x)}1' $i > renamed/$i; done"
  }
]